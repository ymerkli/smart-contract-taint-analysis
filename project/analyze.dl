#include "utils/types.dl"       // Type Definitions
#include "utils/basics.dl"      // Basic Declarations & Input
#include "utils/helpers.dl"     // Helper Declarations

#include "utils/util-context.dl"    // Function Context
#include "utils/util-graph.dl"      // Graph Operations
#include "utils/util-propagate.dl"  // Propagate Operations
#include "utils/util-storage.dl"    // Storage Operations

/************************* Function & Block Context *************************/

.init contexts = Context
.init block_graph  = DiGraphDomOps<Block>

// Setup contexts for external function calls
contexts.populateContextForInit(calleeFunction) :- function(calleeFunction, _).

// Build contexts for internal function calls
contexts.populateContextForCall(calleeFunction, transferToCallee, callerContext) :-
    jump(transferToCallee, _, calleeFunction, _),
    isInFunction(transferToCallee, callerFunction),
    contexts.contextFor(callerFunction, callerContext).

// Associate elements with contexts
contexts.elementInContext(element, context) :-
    isInFunction(element, function),
    contexts.contextFor(function, context).

// Setup block graph
block_graph.edge(id_block_to, id_block_from) :- followsBlock(id_block_to, id_block_from).

/************************* Taints *************************/

.init is_tainted = HardTaintOps
.init maybe_tainted = WeakTaintOps

// Set hard taints to function arguments, msg.Sencer/msg.Value, loads of tainted fields and returns from context depth 4 or greater
is_tainted.populateTainted(id, context) :-
    (
        (argument(id, function, _), contexts.contextForInit(function, context));

        (
            msgSender(id);
            msgValue(id);
            (load(id, field), tainted_storage.field(field, id, context))
        ),
        contexts.elementInContext(id, context);

        argument(id, id_block_cont, _),
        jump(transferToCallee, _, calleeFunction, id_block_cont),
        return(transferToCaller, _),
        isInFunction(transferToCaller, calleeFunction),
        contexts.contextDepth(calleeContext, depth), depth > 3,
        contexts.contextForCall(calleeFunction, transferToCallee, context, calleeContext)
    ).

// Set weak taints to loads of maybe tainted fields
maybe_tainted.populateTainted(id, tainted_by_field, context) :-
    load(id, loaded_field),
    maybe_tainted_storage.field(loaded_field, tainted_by_field, id, context),
    contexts.elementInContext(id, context).

// Set general taints to hard tainted values and to weak tainted values, where the storage field it depends on is not sanitized
.decl tainted(id: SSA, context: CallStack)
tainted(id, context) :-
    !maybe_guard.guard(id, _, context),
    (
        is_tainted.tainted(id, context);

        maybe_tainted.tainted(id, tainted_by_field, context),
        return(_, id_block_from),
        (
            lastSSAInBlock(id_block_from, id_prev);
            id_prev=id_block_from, !blockStmt(id_block_from, _)
        ),
        tainted_storage.field(tainted_by_field, id_prev, prev_context),
        (
            !maybeSanitizedBlock(id_block_from, _, _, prev_context);
            (maybeSanitizedBlock(id_block_from, _, _, prev_context), notSanitizedBlock(id_block_from, prev_context));
            (maybeSanitizedBlock(id_block_from, ssa_stack, _, prev_context), taintedSSAStack(ssa_stack))
        ),
        contexts.contextForInit(_, prev_context)
    ).

// Set general taints to SSAStacks if they contain a tainted SSA
.decl taintedSSAStack(ssa_stack: SSAStack)
taintedSSAStack([head, tail]) :-
    (
        tainted(id, id_context);
        taintedSSAStack(tail)
    ),
    ssa_stack = [head, tail],
    head = [id, id_context],
    maybe_guard.guard(_, ssa_stack, _).

// Set general taints to sinks if they appear in not sanitized blocks
.decl tainted_sinks(id: SSA)
tainted_sinks(id) :-
    selfdestruct(id, _),
    blockStmt(id_block, id),
    (
        !maybeSanitizedBlock(id_block, _, 0, context);
        (maybeSanitizedBlock(id_block, _, 0, context), notSanitizedBlock(id_block, context));
        (maybeSanitizedBlock(id_block, ssa_stack, 0, context), taintedSSAStack(ssa_stack))
    ),
    contexts.elementInContext(id, context).

/************************* Sanitization *************************/

// Keep track of possible guards
.init maybe_guard = GuardOps
maybe_guard.populateGuard(id, ssa_stack, context) :-
    (
        (bop(id, id_lhs, id_rhs, _), msgSender(id_lhs), ssa_stack=[[id_rhs, context], nil]);
        (bop(id, id_lhs, id_rhs, _), msgSender(id_rhs), ssa_stack=[[id_lhs, context], nil]);
        (load(id, field), guard_storage.field(field, ssa_stack, id, context))
    ),
    contexts.elementInContext(id, context).

// Keep track of possible guard blocks
.decl maybeGuardBlock(id_block: Block, ssa_stack: SSAStack, context: CallStack)
maybeGuardBlock(id_block, ssa_stack, context) :-
    maybe_guard.guard(id, ssa_stack, context),
    branch(_, _, id_block, _, _, id).

// Keep track of possibly sanitized blocks
.decl maybeSanitizedBlock(id_block: Block, ssa_stack: SSAStack, backprop: number, context: CallStack)
maybeSanitizedBlock(id_block, ssa_stack, backprop, context) :-
    (
        (maybeGuardBlock(id_block, ssa_stack, context), backprop=0);

        // Blocks that are dominated by a sanitized block are sanitized
        block_graph.dominatedBy(id_block, dominator),
        maybeSanitizedBlock(dominator, ssa_stack, backprop, context);

        // Functions called from sanitized blocks are sanitized
        jump(transferToCallee, id_block_from, id_block, _),
        maybeSanitizedBlock(id_block_from, ssa_stack, backprop, callerContext),
        contexts.contextForCall(id_block, transferToCallee, callerContext, context);

        // Blocks that a sanitized function returns to become sanitized
        jump(transferToCallee, _, calleeFunction, id_block),
        return(_, id_block_from),
        isInFunction(id_block_from, calleeFunction),
        maybeSanitizedBlock(id_block_from, ssa_stack, backprop, calleeContext),
        contexts.contextForCall(calleeFunction, transferToCallee, context, calleeContext),
        backprop=0;

        // Backpropagation of sanitized tag
        followsBlock(id_block_to, id_block),
        (
            !isIfBranch(id_block);
            isIfBranch(id_block), goto(_, id_block_to, _)
        ),
        maybeSanitizedBlock(id_block_to, ssa_stack, _, context),
        backprop=1
    ).

// Handle multiple return values, where at least one is not sanitized
.decl notSanitizedBlock(id_block: Block, context: CallStack)
notSanitizedBlock(id_block, context) :-
    (
        jump(transferToCallee, _, calleeFunction, id_block),
        return(_, id_block_from),
        isInFunction(id_block_from, calleeFunction),
        (
            !maybeSanitizedBlock(id_block_from, _, 0, calleeContext);
            notSanitizedBlock(id_block_from, calleeContext)
        ),
        contexts.contextForCall(calleeFunction, transferToCallee, context, calleeContext);

        // Propagate inside context
        followsBlock(id_block, id_block_from),
        !jump(_, id_block_from, _, id_block),
        notSanitizedBlock(id_block_from, context);

        // Functions called from not sanitized blocks are not sanitized
        jump(transferToCallee, id_block_from, id_block, _),
        notSanitizedBlock(id_block_from, callerContext),
        contexts.contextForCall(id_block, transferToCallee, callerContext, context)
    ),
    !maybeGuardBlock(id_block, _, context).

/************************* Storage *************************/

// Set hard taints to fields that are overwritten by a tainted value
.init tainted_storage = HardTaintStorageOps
tainted_storage.populateField(field, element, context) :-
    store(element, field, id_var),
    is_tainted.tainted(id_var, context).

// Set weak taints to fields at the beginning of all functions, that are tainted at the end of another function
.init maybe_tainted_storage = WeakTaintStorageOps
maybe_tainted_storage.populateField(field, tainted_by_field, element, context) :-
    (
        store(element, field, id_var),
        maybe_tainted.tainted(id_var, tainted_by_field, context);

        return(_, id_return_block),
        (
            (lastSSAInBlock(id_return_block, id), !selfdestruct(id, _));
            (id=id_return_block, !blockStmt(id_return_block, _))
        ),
        (
            (tainted_storage.field(field, id, prev_context), tainted_by_field=field);
            maybe_tainted_storage.field(field, tainted_by_field, id, prev_context)
        ),
        contexts.contextForInit(_, prev_context),
        (
            (firstSSAInBlock(function, element), !store(element, field, _));
            (element=function, !blockStmt(function, _))
        ),
        contexts.contextForInit(function, context)
    ).

// capture guards stored in storage fields
.init guard_storage = GuardStorageOps
guard_storage.populateField(field, ssa_stack, element, context) :-
    store(element, field, id_var),
    maybe_guard.guard(id_var, ssa_stack, context).

/************************* Outputs *************************/

.output tainted_sinks
