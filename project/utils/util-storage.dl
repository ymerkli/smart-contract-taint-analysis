#ifndef STORAGE_UTILS
#define STORAGE_UTILS

/************************* Storage Operations *************************/

.comp StorageTransferOps {
    .decl property(field: Name, tainted_by_field: Name, ssa_stack: SSAStack, element: Element, context: CallStack)
    .decl populateProperty(field: Name, tainted_by_field: Name, ssa_stack: SSAStack, element: Element, context: CallStack)

    property(field, tainted_by_field, ssa_stack, element, context) :-
        (
            populateProperty(field, tainted_by_field, ssa_stack, element, context);

            // Propagation inside block
            follows(element, id),
            !store(element, field, _),
            property(field, tainted_by_field, ssa_stack, id, context);

            // Propagation inside context
            (
                (firstSSAInBlock(id_block_to, element), !store(element, field, _));
                (element=id_block_to, !blockStmt(id_block_to, _))
            ),
            (
                goto(id_transfer, _, id_block_to);
                branch(id_transfer, _, _, id_block_to, _, _);
                branch(_, id_transfer, _, _, id_block_to, _)
            ),
            propertyTransfer(field, tainted_by_field, ssa_stack, id_transfer, context);

            // Propagation into sub-contexts
            (
                (firstSSAInBlock(calleeFunction, element), !store(element, field, _));
                (element=calleeFunction, !blockStmt(calleeFunction, _))
            ),
            jump(transferToCallee, _, calleeFunction, _),
            propertyTransfer(field, tainted_by_field, ssa_stack, transferToCallee, callerContext),
            contexts.contextForCall(calleeFunction, transferToCallee, callerContext, context);

            // Propagation into parent-contexts
            (
                (firstSSAInBlock(id_block_cont, element), !store(element, field, _));
                (element=id_block_cont, !blockStmt(id_block_cont, _))
            ),
            jump(transferToCallee, _, calleeFunction, id_block_cont),
            return(transferToCaller, _),
            isInFunction(transferToCaller, calleeFunction),
            propertyTransfer(field, tainted_by_field, ssa_stack, transferToCaller, calleeContext),
            contexts.contextForCall(calleeFunction, transferToCallee, context, calleeContext)
        ).

    .decl propertyTransfer(field: Name, tainted_by_field: Name, ssa_stack: SSAStack, id_transfer: Transfer, context: CallStack)
    propertyTransfer(field, tainted_by_field, ssa_stack, id_transfer, context) :-
        transferFrom(id_transfer, id_block_from),
        (
            lastSSAInBlock(id_block_from, id);
            (id=id_block_from, !blockStmt(id_block_from, _))
        ),
        property(field, tainted_by_field, ssa_stack, id, context).
}

.comp HardTaintStorageOps : StorageTransferOps {
    .decl field(field: Name, element: Element, context: CallStack)
    field(field, element, context) :- property(field, _, _, element, context).

    .decl populateField(field: Name, element: Element, context: CallStack)
    populateProperty(field, tainted_by_field, ssa_stack, element, context) :-
        populateField(field, element, context),
        tainted_by_field="",
        ssa_stack=nil.
}

.comp WeakTaintStorageOps : StorageTransferOps {
    .decl field(field: Name, tainted_by_field: Name, element: Element, context: CallStack)
    field(field, tainted_by_field, element, context) :- property(field, tainted_by_field, _, element, context).

    .decl populateField(field: Name, tainted_by_field: Name, element: Element, context: CallStack)
    populateProperty(field, tainted_by_field, ssa_stack, element, context) :-
        populateField(field, tainted_by_field, element, context),
        ssa_stack=nil.
}

.comp GuardStorageOps : StorageTransferOps {
    .decl field(field: Name, ssa_stack: SSAStack, element: Element, context: CallStack)
    field(field, ssa_stack, element, context) :- property(field, _, ssa_stack, element, context).

    .decl populateField(field: Name, ssa_stack: SSAStack, element: Element, context: CallStack)
    populateProperty(field, tainted_by_field, ssa_stack, element, context) :-
        populateField(field, ssa_stack, element, context),
        tainted_by_field="".
}

#endif
